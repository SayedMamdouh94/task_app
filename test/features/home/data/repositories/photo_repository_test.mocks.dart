// Mocks generated by Mockito 5.4.6 from annotations
// in task_app/test/features/home/data/repositories/photo_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_app/features/home/data/datasources/photo_api_service.dart'
    as _i2;
import 'package:task_app/features/home/data/models/album_model.dart' as _i5;
import 'package:task_app/features/home/data/models/photo_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PhotoApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoApiService extends _i1.Mock implements _i2.PhotoApiService {
  MockPhotoApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.PhotoModel>> getPhotos({int? limit = 100}) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotos, [], {#limit: limit}),
            returnValue: _i3.Future<List<_i4.PhotoModel>>.value(
              <_i4.PhotoModel>[],
            ),
          )
          as _i3.Future<List<_i4.PhotoModel>>);

  @override
  _i3.Future<List<_i5.AlbumModel>> getAlbums({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getAlbums, [], {#limit: limit}),
            returnValue: _i3.Future<List<_i5.AlbumModel>>.value(
              <_i5.AlbumModel>[],
            ),
          )
          as _i3.Future<List<_i5.AlbumModel>>);

  @override
  _i3.Future<List<_i4.PhotoModel>> getPhotosByAlbum({
    required int? albumId,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotosByAlbum, [], {
              #albumId: albumId,
              #limit: limit,
            }),
            returnValue: _i3.Future<List<_i4.PhotoModel>>.value(
              <_i4.PhotoModel>[],
            ),
          )
          as _i3.Future<List<_i4.PhotoModel>>);
}
